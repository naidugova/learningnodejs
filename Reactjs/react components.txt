Defining a react component
function Button(){
  return <button>TEST</button>;
}

ReactDOM.render(
  <Button/>,
    document.getElementById('mountNode')
);

we need react hooks to define state
function Button(){
  //a(state object),b(function) = useState()
  const [counter,setCounter] = useState(0);
  return <button onClick={()=>setCounter(counter+1)}>{counter}</button>;
}

ReactDOM.render(
  <Button/>,
    document.getElementById('mountNode')
);

small task
function Button(){
  //a(state object),b(function) = useState()
  const [counter,setCounter] = useState(5);
  return <button onClick={()=>setCounter(counter*2)}>{counter}</button>;
}

ReactDOM.render(
  <Button/>,
    document.getElementById('mountNode')
);

Using hooks and flowing data,functions to components
function Button(props){
  //a(state object),b(function) = useState()
  //const [counter,setCounter] = useState(0);
  //const handleClick = ()=>setCounter(counter+1);
  return (
    <button onClick={props.onClickFunction}>
      +1
    </button>
  );
}

//Display 
function Display(props){
  return(
    <div>{props.message}</div>
  );
}

//App
function App(){
  const [counter,setCounter] = useState(0);
  const incrementCounter = () => setCounter(counter+1)
  return(
    <div>
      <Button onClickFunction={incrementCounter}/>
      <Display message={counter}/>
    </div>
  );
}

ReactDOM.render(
  <App/>,
    document.getElementById('mountNode')
);

making code more generic so that we can reuse it. We will implement this on our button example
function Button(props){
  //a(state object),b(function) = useState()
  //const [counter,setCounter] = useState(0);
  const handleClick = ()=>props.onClickFunction(props.increment);
  return (
    <button onClick={handleClick}>
      +{props.increment}
    </button>
  );
}

//Display 
function Display(props){
  return(
    <div>{props.message}</div>
  );
}

//App
function App(){
  const [counter,setCounter] = useState(0);
  const incrementCounter = (count) => setCounter(counter+count)
  return(
    <div>
      <Button onClickFunction={incrementCounter} increment={1}/>
      <Button onClickFunction={incrementCounter} increment={5}/>
      <Button onClickFunction={incrementCounter} increment={10}/>
      <Button onClickFunction={incrementCounter} increment={100}/>
      <Display message={counter}/>
    </div>
  );
}

ReactDOM.render(
  <App/>,
    document.getElementById('mountNode')
);

Tree Reconciliation in action
                                                                                                                           

